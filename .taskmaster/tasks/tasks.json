{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Configuration",
        "description": "Initialize the project structure, configure Deno, and set up environment variables handling",
        "details": "1. Create the basic file structure as specified in the PRD\n2. Initialize a Git repository\n3. Create a .gitignore file that excludes .env and other sensitive files\n4. Set up dotenv for environment variable handling\n5. Create a sample .env file with placeholder for GEMINI_API_KEY\n6. Configure Deno runtime settings\n7. Set up basic HTML structure in index.html with necessary script imports\n8. Initialize package.json if needed for development dependencies\n\nExample .gitignore content:\n```\n.env\n.DS_Store\nnode_modules/\n```\n\nExample .env template:\n```\nGEMINI_API_KEY=your_api_key_here\n```",
        "testStrategy": "Verify that the project structure matches the PRD requirements. Test that .env variables can be loaded correctly. Ensure Git repository is initialized with proper .gitignore settings. Confirm Deno can run the project without errors.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "UI Implementation with Tailwind CSS",
        "description": "Implement the responsive user interface with Tailwind CSS, including dark/light mode toggle",
        "details": "1. Set up Tailwind CSS with the latest version\n2. Create the main layout structure in index.html\n3. Implement responsive design for different screen sizes\n4. Create UI components:\n   - Input field for topic entry\n   - Submit button\n   - Loading indicator\n   - Mindmap container\n   - Export/import buttons\n   - Dark/light mode toggle\n5. Implement dark/light mode functionality using Tailwind's dark mode classes\n6. Add basic animations for transitions\n\nExample HTML structure:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Mindmap AI Analyse App</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body class=\"bg-white dark:bg-gray-900 transition-colors duration-200\">\n  <div class=\"container mx-auto px-4 py-8\">\n    <header class=\"mb-8\">\n      <h1 class=\"text-3xl font-bold text-gray-800 dark:text-white\">Mindmap AI Analyse</h1>\n      <button id=\"theme-toggle\" class=\"p-2 rounded-md bg-gray-200 dark:bg-gray-700\">\n        Toggle Theme\n      </button>\n    </header>\n    \n    <main>\n      <div class=\"mb-6\">\n        <input type=\"text\" id=\"topic-input\" placeholder=\"Enter a topic...\" class=\"w-full p-2 border rounded-md\">\n        <button id=\"analyze-btn\" class=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded-md\">Analyze</button>\n      </div>\n      \n      <div id=\"loading\" class=\"hidden\">Analyzing...</div>\n      \n      <div id=\"mindmap-container\" class=\"border rounded-md p-4 min-h-[400px]\"></div>\n      \n      <div class=\"mt-4 flex gap-2\">\n        <button id=\"export-json\" class=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded-md\">Export JSON</button>\n        <button id=\"export-md\" class=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded-md\">Export MD</button>\n        <button id=\"export-svg\" class=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded-md\">Export SVG</button>\n        <input type=\"file\" id=\"import-file\" class=\"hidden\">\n        <button id=\"import-btn\" class=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded-md\">Import</button>\n      </div>\n    </main>\n  </div>\n  \n  <script type=\"module\" src=\"main.js\"></script>\n</body>\n</html>\n```",
        "testStrategy": "Test the UI on different screen sizes to verify responsiveness. Verify dark/light mode toggle works correctly. Ensure all UI components are properly styled and positioned. Test accessibility features like keyboard navigation and screen reader compatibility.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "LLM API Integration",
        "description": "Implement the Google Gemini LLM integration for generating mindmap content",
        "details": "1. Create llm-api.js module\n2. Implement Google GenAI SDK integration\n3. Create function to fetch API key from environment variables\n4. Implement error handling for API calls\n5. Create a function to process user input and generate the 9 perspectives\n\nExample implementation in llm-api.js:\n```js\nimport { GoogleGenAI } from '@google/genai';\n\n// Initialize the API client\nconst initializeAI = () => {\n  try {\n    const apiKey = Deno.env.get('GEMINI_API_KEY');\n    if (!apiKey) throw new Error('GEMINI_API_KEY not found in environment variables');\n    \n    return new GoogleGenAI({\n      apiKey: apiKey,\n    });\n  } catch (error) {\n    console.error('Error initializing AI:', error);\n    throw error;\n  }\n};\n\n// Generate perspectives for a given topic\nexport async function generatePerspectives(topic) {\n  try {\n    const ai = initializeAI();\n    const model = ai.getGenerativeModel({ model: 'gemini-pro' });\n    \n    const prompt = `Generate 9 different perspectives on the topic \"${topic}\", ranging from positive to negative. For each perspective, provide a title, a brief description, and a category. Return the result as a JSON array with objects containing title, description, and category properties.`;\n    \n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    \n    // Parse the JSON response\n    try {\n      return JSON.parse(text);\n    } catch (e) {\n      console.error('Failed to parse LLM response as JSON:', e);\n      // Attempt to extract JSON from text if not properly formatted\n      const jsonMatch = text.match(/\\[\\s*\\{.*\\}\\s*\\]/s);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      throw new Error('Invalid response format from LLM');\n    }\n  } catch (error) {\n    console.error('Error generating perspectives:', error);\n    throw error;\n  }\n}\n```",
        "testStrategy": "Test API integration with valid and invalid API keys. Verify error handling for network issues and API limits. Test the response parsing with various LLM outputs. Create mock responses to test the integration without making actual API calls. Verify the function returns the expected data structure with 9 perspectives.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Prompt Engineering",
        "description": "Create effective prompts for the LLM to generate structured mindmap content",
        "details": "1. Create prompts.js module to store and manage prompts\n2. Design a prompt template that instructs the LLM to generate exactly 9 perspectives\n3. Ensure the prompt requests specific fields: title, description, and category\n4. Include instructions for the LLM to provide a range from positive to negative perspectives\n5. Format the prompt to request JSON output for easy parsing\n\nExample implementation in prompts.js:\n```js\n// Prompt templates for different LLM requests\n\n/**\n * Generate the main analysis prompt for a given topic\n * @param {string} topic - The user-provided topic to analyze\n * @returns {string} The formatted prompt\n */\nexport function generateAnalysisPrompt(topic) {\n  return `\nI need a comprehensive analysis of the topic \"${topic}\" presented as 9 distinct perspectives ranging from positive to negative.\n\nFor each perspective, provide:\n1. A concise title (3-5 words)\n2. A detailed description (2-3 sentences)\n3. A category label (one word that represents the theme of this perspective)\n\nEnsure the perspectives cover a wide range of viewpoints, with:\n- Perspectives 1-3: Positive/optimistic views\n- Perspectives 4-6: Neutral/balanced views\n- Perspectives 7-9: Critical/challenging views\n\nReturn ONLY a JSON array with this exact structure:\n[\n  {\n    \"title\": \"Perspective Title\",\n    \"description\": \"Detailed description of this perspective.\",\n    \"category\": \"CategoryName\"\n  },\n  // ... 8 more objects with the same structure\n]\n`;\n}\n\n/**\n * Generate a prompt for expanding a specific perspective\n * @param {string} topic - The main topic\n * @param {Object} perspective - The perspective to expand\n * @returns {string} The formatted prompt\n */\nexport function generateExpansionPrompt(topic, perspective) {\n  return `\nExpand on the \"${perspective.title}\" perspective of the topic \"${topic}\".\n\nProvide 3 supporting points that elaborate on this perspective.\n\nFor each supporting point, include:\n1. A brief title\n2. A one-sentence explanation\n\nReturn ONLY a JSON array with this structure:\n[\n  {\n    \"title\": \"Supporting Point Title\",\n    \"explanation\": \"Explanation of this supporting point.\"\n  },\n  // ... 2 more objects with the same structure\n]\n`;\n}\n```",
        "testStrategy": "Test prompts with various topics to ensure they generate consistent, well-structured responses. Verify that the prompts result in exactly 9 perspectives with the required fields. Test edge cases like very broad or very specific topics. Ensure the prompts guide the LLM to provide a balanced range from positive to negative perspectives.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Mindmap Visualization",
        "description": "Implement the interactive mindmap visualization using markmap-lib",
        "details": "1. Create mindmap.js module\n2. Integrate markmap-lib for SVG rendering\n3. Implement functions to convert LLM output to markmap-compatible format\n4. Add interactivity for folding/unfolding nodes\n5. Implement hover functionality to show descriptions\n6. Add color coding based on categories\n\nExample implementation in mindmap.js:\n```js\nimport { Markmap } from 'markmap-lib';\n\n// Convert LLM perspectives to markmap-compatible markdown\nfunction perspectivesToMarkdown(topic, perspectives) {\n  let markdown = `# ${topic}\\n`;\n  \n  perspectives.forEach(perspective => {\n    markdown += `## ${perspective.title}\\n`;\n    markdown += `- Category: ${perspective.category}\\n`;\n    markdown += `- ${perspective.description}\\n`;\n  });\n  \n  return markdown;\n}\n\n// Generate color based on category\nfunction getCategoryColor(category) {\n  // Simple hash function to generate consistent colors for categories\n  let hash = 0;\n  for (let i = 0; i < category.length; i++) {\n    hash = category.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  \n  const hue = Math.abs(hash % 360);\n  return `hsl(${hue}, 70%, 50%)`;\n}\n\n// Initialize the mindmap\nexport function initMindmap(container) {\n  return Markmap.create(container);\n}\n\n// Render the mindmap with the given data\nexport function renderMindmap(markmap, topic, perspectives) {\n  const markdown = perspectivesToMarkdown(topic, perspectives);\n  const data = Markmap.transform(markdown);\n  \n  // Add custom styling based on categories\n  data.forEach(node => {\n    if (node.content.includes('Category:')) {\n      const category = node.content.match(/Category: (\\w+)/)[1];\n      node.style = { color: getCategoryColor(category) };\n    }\n  });\n  \n  markmap.setData(data);\n  markmap.fit();\n}\n\n// Add hover functionality to show descriptions\nexport function addHoverFunctionality(container) {\n  container.addEventListener('mouseover', (event) => {\n    const target = event.target.closest('.markmap-node');\n    if (target) {\n      const description = target.getAttribute('data-description');\n      if (description) {\n        // Show tooltip with description\n        const tooltip = document.createElement('div');\n        tooltip.className = 'markmap-tooltip';\n        tooltip.textContent = description;\n        document.body.appendChild(tooltip);\n        \n        // Position tooltip near the node\n        const rect = target.getBoundingClientRect();\n        tooltip.style.left = `${rect.right + 10}px`;\n        tooltip.style.top = `${rect.top}px`;\n      }\n    }\n  });\n  \n  container.addEventListener('mouseout', () => {\n    const tooltip = document.querySelector('.markmap-tooltip');\n    if (tooltip) {\n      tooltip.remove();\n    }\n  });\n}\n```",
        "testStrategy": "Test the mindmap rendering with various data structures. Verify that folding/unfolding nodes works correctly. Test hover functionality to ensure descriptions appear correctly. Verify color coding based on categories. Test with large datasets to ensure performance. Verify that the mindmap is responsive and works on different screen sizes.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Export Functionality",
        "description": "Implement export functionality for JSON, Markdown, and SVG formats",
        "details": "1. Create utils/export.js module\n2. Implement JSON export functionality\n3. Implement Markdown export functionality\n4. Implement SVG export functionality\n5. Add file download capabilities\n\nExample implementation in utils/export.js:\n```js\n/**\n * Export the mindmap data as JSON\n * @param {string} topic - The main topic\n * @param {Array} perspectives - The perspectives data\n * @returns {string} JSON string for download\n */\nexport function exportAsJSON(topic, perspectives) {\n  const data = {\n    topic,\n    perspectives,\n    exportDate: new Date().toISOString()\n  };\n  \n  return JSON.stringify(data, null, 2);\n}\n\n/**\n * Export the mindmap data as Markdown\n * @param {string} topic - The main topic\n * @param {Array} perspectives - The perspectives data\n * @returns {string} Markdown string for download\n */\nexport function exportAsMarkdown(topic, perspectives) {\n  let markdown = `# ${topic}\\n\\n`;\n  \n  perspectives.forEach((perspective, index) => {\n    markdown += `## ${perspective.title}\\n\\n`;\n    markdown += `**Category:** ${perspective.category}\\n\\n`;\n    markdown += `${perspective.description}\\n\\n`;\n  });\n  \n  return markdown;\n}\n\n/**\n * Export the mindmap as SVG\n * @param {HTMLElement} container - The container with the SVG\n * @returns {string} SVG string for download\n */\nexport function exportAsSVG(container) {\n  const svg = container.querySelector('svg');\n  if (!svg) return null;\n  \n  // Clone the SVG to avoid modifying the displayed one\n  const clonedSvg = svg.cloneNode(true);\n  \n  // Add necessary attributes for standalone SVG\n  clonedSvg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  clonedSvg.setAttribute('version', '1.1');\n  \n  // Get computed styles and apply them inline for export\n  const svgElements = clonedSvg.querySelectorAll('*');\n  svgElements.forEach(el => {\n    const computedStyle = window.getComputedStyle(el);\n    const importantStyles = ['fill', 'stroke', 'stroke-width', 'font-family', 'font-size'];\n    \n    importantStyles.forEach(style => {\n      if (computedStyle[style]) {\n        el.style[style] = computedStyle[style];\n      }\n    });\n  });\n  \n  return new XMLSerializer().serializeToString(clonedSvg);\n}\n\n/**\n * Download data as a file\n * @param {string} content - The content to download\n * @param {string} filename - The filename\n * @param {string} contentType - The content type\n */\nexport function downloadFile(content, filename, contentType) {\n  const blob = new Blob([content], { type: contentType });\n  const url = URL.createObjectURL(blob);\n  \n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  \n  setTimeout(() => URL.revokeObjectURL(url), 100);\n}\n```",
        "testStrategy": "Test each export format with various data structures. Verify that the exported files can be opened in appropriate applications. Test with special characters and large datasets. Verify that the download functionality works across different browsers. Test the SVG export to ensure styles are preserved.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Import Functionality",
        "description": "Implement import functionality for previously exported JSON files",
        "details": "1. Create utils/import.js module\n2. Implement file upload functionality\n3. Add JSON parsing and validation\n4. Implement error handling for invalid files\n5. Connect import functionality to mindmap rendering\n\nExample implementation in utils/import.js:\n```js\n/**\n * Parse and validate imported JSON data\n * @param {string} jsonString - The JSON string to parse\n * @returns {Object} The parsed data object or null if invalid\n */\nexport function parseImportedJSON(jsonString) {\n  try {\n    const data = JSON.parse(jsonString);\n    \n    // Validate the imported data structure\n    if (!data.topic || !Array.isArray(data.perspectives)) {\n      throw new Error('Invalid data structure');\n    }\n    \n    // Validate each perspective has required fields\n    data.perspectives.forEach(perspective => {\n      if (!perspective.title || !perspective.description || !perspective.category) {\n        throw new Error('Invalid perspective data');\n      }\n    });\n    \n    return data;\n  } catch (error) {\n    console.error('Error parsing imported JSON:', error);\n    return null;\n  }\n}\n\n/**\n * Handle file upload and reading\n * @param {File} file - The uploaded file\n * @returns {Promise<Object>} Promise resolving to the parsed data\n */\nexport function readImportedFile(file) {\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      reject(new Error('No file selected'));\n      return;\n    }\n    \n    // Verify file type\n    if (!file.name.endsWith('.json')) {\n      reject(new Error('Only JSON files are supported'));\n      return;\n    }\n    \n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      try {\n        const data = parseImportedJSON(event.target.result);\n        if (data) {\n          resolve(data);\n        } else {\n          reject(new Error('Invalid file format'));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('Error reading file'));\n    };\n    \n    reader.readAsText(file);\n  });\n}\n\n/**\n * Set up the file import button\n * @param {HTMLElement} button - The import button element\n * @param {HTMLElement} fileInput - The file input element\n * @param {Function} onImport - Callback function when import is successful\n */\nexport function setupImportButton(button, fileInput, onImport) {\n  button.addEventListener('click', () => {\n    fileInput.click();\n  });\n  \n  fileInput.addEventListener('change', async (event) => {\n    try {\n      const file = event.target.files[0];\n      const data = await readImportedFile(file);\n      onImport(data);\n      \n      // Reset the file input\n      fileInput.value = '';\n    } catch (error) {\n      alert(`Import error: ${error.message}`);\n      console.error('Import error:', error);\n    }\n  });\n}\n```",
        "testStrategy": "Test importing valid and invalid JSON files. Verify error handling for malformed JSON. Test with files that have missing required fields. Verify that imported data is correctly displayed in the mindmap. Test with large files to ensure performance. Test the file type validation.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Main Application Logic",
        "description": "Implement the main application logic to connect all components",
        "details": "1. Create main.js as the entry point\n2. Connect UI events to LLM API calls\n3. Handle the flow from user input to mindmap display\n4. Implement loading states and error handling\n5. Connect export and import functionality\n\nExample implementation in main.js:\n```js\nimport { generatePerspectives } from './llm-api.js';\nimport { initMindmap, renderMindmap, addHoverFunctionality } from './mindmap.js';\nimport { exportAsJSON, exportAsMarkdown, exportAsSVG, downloadFile } from './utils/export.js';\nimport { setupImportButton } from './utils/import.js';\n\n// State management\nlet currentTopic = '';\nlet currentPerspectives = [];\nlet mindmap = null;\n\n// DOM elements\nconst topicInput = document.getElementById('topic-input');\nconst analyzeBtn = document.getElementById('analyze-btn');\nconst loadingIndicator = document.getElementById('loading');\nconst mindmapContainer = document.getElementById('mindmap-container');\nconst exportJsonBtn = document.getElementById('export-json');\nconst exportMdBtn = document.getElementById('export-md');\nconst exportSvgBtn = document.getElementById('export-svg');\nconst importBtn = document.getElementById('import-btn');\nconst importFileInput = document.getElementById('import-file');\nconst themeToggleBtn = document.getElementById('theme-toggle');\n\n// Initialize the application\nfunction init() {\n  // Initialize mindmap\n  mindmap = initMindmap(mindmapContainer);\n  addHoverFunctionality(mindmapContainer);\n  \n  // Set up event listeners\n  analyzeBtn.addEventListener('click', handleAnalyze);\n  topicInput.addEventListener('keypress', (e) => {\n    if (e.key === 'Enter') handleAnalyze();\n  });\n  \n  // Export buttons\n  exportJsonBtn.addEventListener('click', handleExportJSON);\n  exportMdBtn.addEventListener('click', handleExportMarkdown);\n  exportSvgBtn.addEventListener('click', handleExportSVG);\n  \n  // Import functionality\n  setupImportButton(importBtn, importFileInput, handleImport);\n  \n  // Theme toggle\n  themeToggleBtn.addEventListener('click', toggleTheme);\n  \n  // Load theme preference\n  loadThemePreference();\n  \n  // Load example if available\n  loadExample();\n}\n\n// Handle analyze button click\nasync function handleAnalyze() {\n  const topic = topicInput.value.trim();\n  if (!topic) {\n    alert('Please enter a topic');\n    return;\n  }\n  \n  // Show loading state\n  setLoading(true);\n  \n  try {\n    // Generate perspectives using LLM\n    const perspectives = await generatePerspectives(topic);\n    \n    // Update state\n    currentTopic = topic;\n    currentPerspectives = perspectives;\n    \n    // Render mindmap\n    renderMindmap(mindmap, currentTopic, currentPerspectives);\n  } catch (error) {\n    console.error('Analysis error:', error);\n    alert(`Error analyzing topic: ${error.message}`);\n  } finally {\n    setLoading(false);\n  }\n}\n\n// Handle import\nfunction handleImport(data) {\n  if (!data) return;\n  \n  currentTopic = data.topic;\n  currentPerspectives = data.perspectives;\n  \n  // Update UI\n  topicInput.value = currentTopic;\n  \n  // Render mindmap\n  renderMindmap(mindmap, currentTopic, currentPerspectives);\n}\n\n// Export handlers\nfunction handleExportJSON() {\n  if (!currentTopic || !currentPerspectives.length) {\n    alert('No data to export');\n    return;\n  }\n  \n  const jsonData = exportAsJSON(currentTopic, currentPerspectives);\n  downloadFile(jsonData, `${currentTopic.toLowerCase().replace(/\\s+/g, '-')}.json`, 'application/json');\n}\n\nfunction handleExportMarkdown() {\n  if (!currentTopic || !currentPerspectives.length) {\n    alert('No data to export');\n    return;\n  }\n  \n  const markdown = exportAsMarkdown(currentTopic, currentPerspectives);\n  downloadFile(markdown, `${currentTopic.toLowerCase().replace(/\\s+/g, '-')}.md`, 'text/markdown');\n}\n\nfunction handleExportSVG() {\n  if (!mindmapContainer.querySelector('svg')) {\n    alert('No mindmap to export');\n    return;\n  }\n  \n  const svg = exportAsSVG(mindmapContainer);\n  downloadFile(svg, `${currentTopic.toLowerCase().replace(/\\s+/g, '-')}.svg`, 'image/svg+xml');\n}\n\n// Theme toggle\nfunction toggleTheme() {\n  const isDark = document.documentElement.classList.toggle('dark');\n  localStorage.setItem('theme', isDark ? 'dark' : 'light');\n}\n\nfunction loadThemePreference() {\n  const theme = localStorage.getItem('theme');\n  if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n    document.documentElement.classList.add('dark');\n  }\n}\n\n// Helper functions\nfunction setLoading(isLoading) {\n  if (isLoading) {\n    loadingIndicator.classList.remove('hidden');\n    analyzeBtn.disabled = true;\n  } else {\n    loadingIndicator.classList.add('hidden');\n    analyzeBtn.disabled = false;\n  }\n}\n\n// Load example data if available\nasync function loadExample() {\n  try {\n    const response = await fetch('./examples/superliga.json');\n    if (response.ok) {\n      const data = await response.json();\n      handleImport(data);\n    }\n  } catch (error) {\n    console.log('No example data available');\n  }\n}\n\n// Initialize the app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', init);\n```",
        "testStrategy": "Test the complete application flow from user input to mindmap display. Verify error handling for API failures. Test loading states and UI feedback. Verify that all components work together correctly. Test with various topics and edge cases. Verify that theme toggle works correctly. Test the example loading functionality.",
        "priority": "high",
        "dependencies": [
          3,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Example Data Creation",
        "description": "Create example data for the application",
        "details": "1. Create the examples directory\n2. Generate a sample analysis for 'Superliga' topic\n3. Save the analysis as superliga.json\n4. Ensure the example data follows the correct format\n\nExample superliga.json:\n```json\n{\n  \"topic\": \"Superliga\",\n  \"perspectives\": [\n    {\n      \"title\": \"Economic Growth Opportunity\",\n      \"description\": \"The Superliga would create significant revenue streams for participating clubs through enhanced broadcasting deals and global marketing. This could lead to financial stability for clubs and investment in better facilities and youth development.\",\n      \"category\": \"Economics\"\n    },\n    {\n      \"title\": \"Elite Competition Quality\",\n      \"description\": \"A league featuring only top clubs would consistently produce high-quality matches between the best teams and players. This would elevate the overall standard of play and create more memorable sporting moments.\",\n      \"category\": \"Sport\"\n    },\n    {\n      \"title\": \"Global Fan Engagement\",\n      \"description\": \"The Superliga concept would appeal to international audiences and expand football's reach to new markets. This could grow the sport globally and create new fan communities across different regions.\",\n      \"category\": \"Cultural\"\n    },\n    {\n      \"title\": \"Competitive Balance Concerns\",\n      \"description\": \"While featuring elite clubs, the Superliga might create a permanent class system in football with limited mobility. This could reduce competitive unpredictability that makes sports compelling.\",\n      \"category\": \"Competition\"\n    },\n    {\n      \"title\": \"Tradition vs Innovation\",\n      \"description\": \"The Superliga represents a tension between football's traditional structures and the need for innovation. It raises questions about how the sport should evolve while respecting its heritage and community roots.\",\n      \"category\": \"Cultural\"\n    },\n    {\n      \"title\": \"Governance Challenges\",\n      \"description\": \"Creating a new elite competition raises complex regulatory and governance questions. The balance of power between clubs, national associations, and international bodies would need careful consideration.\",\n      \"category\": \"Political\"\n    },\n    {\n      \"title\": \"Threat to Domestic Leagues\",\n      \"description\": \"Establishing a Superliga could undermine the relevance and financial viability of traditional domestic competitions. This might harm smaller clubs and reduce the overall football ecosystem's health.\",\n      \"category\": \"Structural\"\n    },\n    {\n      \"title\": \"Fan Alienation Risk\",\n      \"description\": \"Many traditional supporters oppose the Superliga concept as contradicting football's community-based values. This disconnect between clubs and their historical fan bases could damage the sport's cultural foundations.\",\n      \"category\": \"Social\"\n    },\n    {\n      \"title\": \"Commercialization Concerns\",\n      \"description\": \"The Superliga represents an acceleration of football's commercialization, potentially prioritizing profit over sporting merit. This shift might fundamentally alter the nature of the game and its role in society.\",\n      \"category\": \"Ethical\"\n    }\n  ],\n  \"exportDate\": \"2023-06-15T12:00:00.000Z\"\n}\n```",
        "testStrategy": "Verify that the example data can be loaded correctly. Test that the example data renders properly in the mindmap. Verify that all required fields are present in the example data. Test that the example data can be exported and re-imported correctly.",
        "priority": "low",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Deno Deploy Configuration",
        "description": "Configure the application for deployment on Deno Deploy",
        "details": "1. Create necessary configuration files for Deno Deploy\n2. Ensure all imports are compatible with Deno runtime\n3. Configure environment variables for production\n4. Test the application in a Deno environment\n5. Create deployment documentation\n\nExample deno.json configuration:\n```json\n{\n  \"tasks\": {\n    \"start\": \"deno run --allow-net --allow-read --allow-env main.js\",\n    \"dev\": \"deno run --watch --allow-net --allow-read --allow-env main.js\"\n  },\n  \"importMap\": \"./import_map.json\"\n}\n```\n\nExample import_map.json:\n```json\n{\n  \"imports\": {\n    \"@google/genai\": \"https://esm.sh/@google/generative-ai\",\n    \"markmap-lib\": \"https://esm.sh/markmap-lib\",\n    \"dotenv\": \"https://deno.land/std/dotenv/mod.ts\"\n  }\n}\n```\n\nDeployment steps documentation:\n```markdown\n# Deployment Guide for Mindmap AI Analyse App\n\n## Prerequisites\n- Deno installed locally\n- Deno Deploy account\n- Google Gemini API key\n\n## Local Development\n1. Clone the repository\n2. Create a `.env` file with your `GEMINI_API_KEY`\n3. Run `deno task dev` to start the development server\n\n## Deployment to Deno Deploy\n1. Push your code to a GitHub repository\n2. In Deno Deploy, create a new project\n3. Connect to your GitHub repository\n4. Set the entry point to `main.js`\n5. Add the environment variable `GEMINI_API_KEY` with your API key\n6. Deploy the project\n\n## Important Notes\n- Ensure all imports use ESM format\n- Do not commit your `.env` file to the repository\n- Use relative imports for local modules\n```",
        "testStrategy": "Test the application in a local Deno environment before deployment. Verify that all imports work correctly in Deno. Test environment variable access in Deno. Verify that the application works correctly when deployed to Deno Deploy. Test the application with and without environment variables to ensure proper error handling.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          8
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-16T16:07:08.088Z",
      "updated": "2025-07-16T16:21:43.450Z",
      "description": "Tasks for master context"
    }
  }
}